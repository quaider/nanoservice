dataSources:
  ds1: !!com.alibaba.druid.pool.DruidDataSource
    driverClassName: com.mysql.jdbc.Driver
    url: jdbc:mysql://192.168.8.129:13306/shop
    username: root
    password: root

  ds1_sl1: !!com.alibaba.druid.pool.DruidDataSource
    driverClassName: com.mysql.jdbc.Driver
    url: jdbc:mysql://192.168.8.129:13307/shop
    username: root
    password: root

  ds1_sl2: !!com.alibaba.druid.pool.DruidDataSource
    driverClassName: com.mysql.jdbc.Driver
    url: jdbc:mysql://192.168.8.129:13308/shop
    username: root
    password: root

  ds2: !!com.alibaba.druid.pool.DruidDataSource
    driverClassName: com.mysql.jdbc.Driver
    url: jdbc:mysql://192.168.8.129:13406/shop
    username: root
    password: root

  ds2_sl1: !!com.alibaba.druid.pool.DruidDataSource
    driverClassName: com.mysql.jdbc.Driver
    url: jdbc:mysql://192.168.8.129:13407/shop
    username: root
    password: root

  ds2_sl2: !!com.alibaba.druid.pool.DruidDataSource
    driverClassName: com.mysql.jdbc.Driver
    url: jdbc:mysql://192.168.8.129:13408/shop
    username: root
    password: root

shardingRule:
  tables:
    t_user:
      actualDataNodes: ms_ds${1..2}.t_user
      databaseStrategy:
        inline:
          shardingColumn: id
          algorithmExpression: ms_ds${id % 2 + 1}

      keyGeneratorColumnName: id

    t_product:
      actualDataNodes: ms_ds${1..2}.t_product
      databaseStrategy:
        inline:
          shardingColumn: id
          algorithmExpression: ms_ds${id % 2 + 1}

      keyGeneratorColumnName: id

    t_order:
      actualDataNodes: ms_ds${1..2}.t_order${1..3}
      tableStrategy:
        inline:
          shardingColumn: id
          algorithmExpression: t_order${id % 3 + 1}

      databaseStrategy:
        inline:
          shardingColumn: buyer_id
          algorithmExpression: ms_ds${buyer_id % 2 + 1}

      keyGeneratorColumnName: id

    t_order_item:
      actualDataNodes: ms_ds${1..2}.t_order${1..3}_item
      tableStrategy:
        inline:
          shardingColumn: buyer_id
          algorithmExpression: t_order${buyer_id % 3 + 1}_item

      databaseStrategy:
        inline:
          shardingColumn: buyer_id
          algorithmExpression: ms_ds${buyer_id % 2 + 1}

      keyGeneratorColumnName: id

  # 绑定表
  bindingTables:
    - t_order,t_order_item

  # 广播表
  broadcastTables:
    - t_config

  defaultDataSourceName: ds1
  defaultDatabaseStrategy:
    inline:
      shardingColumn: id
      algorithmExpression: ms_ds${id % 2 + 1}
  defaultTableStrategy:
    none:

  defaultKeyGeneratorClassName: io.shardingsphere.core.keygen.DefaultKeyGenerator

  masterSlaveRules:
    ms_ds1:
      masterDataSourceName: ds1
      slaveDataSourceNames:
        - ds1_sl1
        - ds1_sl2
      loadBalanceAlgorithmType: ROUND_ROBIN

    ms_ds2:
      masterDataSourceName: ds2
      slaveDataSourceNames:
        - ds2_sl1
        - ds2_sl2
      loadBalanceAlgorithmType: ROUND_ROBIN

props:
  sql.show: true